{
	"info": {
		"_postman_id": "3be61b19-9a42-4cf6-900d-382f5a83b3af",
		"name": "Segarante Apolices Challenge",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16001297"
	},
	"item": [
		{
			"name": "Criar apólice",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gera um número aleatório de 6 dígitos",
							"function gerarNumeroApolice() {",
							"    return Math.floor(100000 + Math.random() * 900000).toString();",
							"}",
							"",
							"const numeroApolice = gerarNumeroApolice();",
							"pm.environment.set('num_policy', numeroApolice);",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test: Status code is 2xx",
							"pm.test(\"Status code is 2xx\", function () {",
							"    pm.expect(pm.response.code).to.be.within(200, 299);",
							"});",
							"",
							"// Test: Response time is less than 2 seconds",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"// Test: Response has JSON Content-Type",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"// Test: Key properties in response body",
							"if (pm.response.headers.get(\"Content-Type\") && pm.response.headers.get(\"Content-Type\").includes(\"application/json\")) {",
							"    let jsonData = pm.response.json();",
							"    pm.test(\"Response has 'id' property\", function () {",
							"        pm.expect(jsonData).to.have.property(\"id\");",
							"    });",
							"    pm.test(\"Response has 'numero_apolice' property\", function () {",
							"        pm.expect(jsonData).to.have.property(\"numero_apolice\");",
							"    });",
							"    pm.test(\"Response has 'status' property\", function () {",
							"        pm.expect(jsonData).to.have.property(\"status\");",
							"    });",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"apolice\": {\n        \"numero\": {{num_policy}},\n        \"data_emissao\": \"2025-10-25\",\n        \"inicio_vigencia\": \"2025-11-24\",\n        \"fim_vigencia\": \"2025-12-25\",\n        \"importancia_segurada\": 1000.01,\n        \"lmg\": 1000.00\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{lh}}/apolices",
					"host": [
						"{{lh}}"
					],
					"path": [
						"apolices"
					]
				}
			},
			"response": []
		},
		{
			"name": "Listar apólices",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test: Status code is 2xx",
							"pm.test(\"Status code is 2xx\", function () {",
							"    pm.expect(pm.response.code).to.be.within(200, 299);",
							"});",
							"",
							"// Test: Response time is less than 2 seconds",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"// Test: Response has JSON Content-Type",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"// Test: Response is an array of policies with key properties",
							"if (pm.response.headers.get(\"Content-Type\") && pm.response.headers.get(\"Content-Type\").includes(\"application/json\")) {",
							"    let jsonData = pm.response.json();",
							"    pm.test(\"Response is an array\", function () {",
							"        pm.expect(jsonData).to.be.an(\"array\");",
							"    });",
							"    if (Array.isArray(jsonData) && jsonData.length > 0) {",
							"        pm.test(\"Each policy has 'id', 'numero_apolice', and 'status'\", function () {",
							"            jsonData.forEach(function(item) {",
							"                pm.expect(item).to.have.property(\"id\");",
							"                pm.expect(item).to.have.property(\"numero_apolice\");",
							"                pm.expect(item).to.have.property(\"status\");",
							"            });",
							"        });",
							"    }",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{lh}}/apolices",
					"host": [
						"{{lh}}"
					],
					"path": [
						"apolices"
					]
				}
			},
			"response": []
		},
		{
			"name": "Consulta por número da apólice",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"if (pm.response.headers.get(\"Content-Type\") && pm.response.headers.get(\"Content-Type\").includes(\"application/json\")) {",
							"    var jsonData = pm.response.json();",
							"    pm.test(\"Response has 'apolice' and 'endossos' properties\", function () {",
							"        pm.expect(jsonData).to.have.property('apolice');",
							"        pm.expect(jsonData).to.have.property('endossos');",
							"    });",
							"    if (jsonData.apolice) {",
							"        pm.test(\"'apolice' has expected properties\", function () {",
							"            pm.expect(jsonData.apolice).to.have.property('numero');",
							"            pm.expect(jsonData.apolice).to.have.property('data_emissao');",
							"            pm.expect(jsonData.apolice).to.have.property('inicio_vigencia');",
							"            pm.expect(jsonData.apolice).to.have.property('fim_vigencia');",
							"            pm.expect(jsonData.apolice).to.have.property('importancia_segurada');",
							"            pm.expect(jsonData.apolice).to.have.property('lmg');",
							"            pm.expect(jsonData.apolice).to.have.property('status');",
							"        });",
							"    }",
							"    if (Array.isArray(jsonData.endossos)) {",
							"        pm.test(\"Each 'endosso' has expected properties\", function () {",
							"            jsonData.endossos.forEach(function(endosso) {",
							"                pm.expect(endosso).to.have.property('numero');",
							"                pm.expect(endosso).to.have.property('tb_apolice_numero');",
							"                pm.expect(endosso).to.have.property('tipo_endosso');",
							"                pm.expect(endosso).to.have.property('data_emissao');",
							"                pm.expect(endosso).to.have.property('importancia_segurada');",
							"                pm.expect(endosso).to.have.property('created_at');",
							"            });",
							"        });",
							"    }",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{lh}}/apolices/{{numero_apolice}}",
					"host": [
						"{{lh}}"
					],
					"path": [
						"apolices",
						"{{numero_apolice}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Criar endosso sobre uma apólice [aumento_is]",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test: Status code is 2xx",
							"pm.test(\"Status code is 2xx\", function () {",
							"    pm.expect(pm.response.code).to.be.within(200, 299);",
							"});",
							"",
							"// Test: Response time is less than 2 seconds",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"// Test: Response has JSON Content-Type",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"// Test: Key properties in response body",
							"if (pm.response.headers.get(\"Content-Type\") && pm.response.headers.get(\"Content-Type\").includes(\"application/json\")) {",
							"    let jsonData = pm.response.json();",
							"    pm.test(\"Response has 'id' property\", function () {",
							"        pm.expect(jsonData).to.have.property(\"id\");",
							"    });",
							"    pm.test(\"Response has 'numero_endosso' property\", function () {",
							"        pm.expect(jsonData).to.have.property(\"numero_endosso\");",
							"    });",
							"    pm.test(\"Response has 'status' property\", function () {",
							"        pm.expect(jsonData).to.have.property(\"status\");",
							"    });",
							"}"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gera um número aleatório de 6 dígitos\r",
							"function gerarNumeroApolice() {\r",
							"    return Math.floor(100000 + Math.random() * 900000).toString();\r",
							"}\r",
							"\r",
							"const numeroApolice = gerarNumeroApolice();\r",
							"pm.environment.set('num_endosso', numeroApolice);\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"endosso\": {\n        \"numero\": {{num_endosso}},\n        \"importancia_segurada\": 350.00\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{lh}}/apolices/{{numero_apolice}}/endossos",
					"host": [
						"{{lh}}"
					],
					"path": [
						"apolices",
						"{{numero_apolice}}",
						"endossos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Criar endosso sobre uma apólice [reducao_is]",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test: Status code is 2xx",
							"pm.test(\"Status code is 2xx\", function () {",
							"    pm.expect(pm.response.code).to.be.within(200, 299);",
							"});",
							"",
							"// Test: Response time is less than 2 seconds",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"// Test: Response has JSON Content-Type",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"// Test: Key properties in response body",
							"if (pm.response.headers.get(\"Content-Type\") && pm.response.headers.get(\"Content-Type\").includes(\"application/json\")) {",
							"    let jsonData = pm.response.json();",
							"    pm.test(\"Response has 'id' property\", function () {",
							"        pm.expect(jsonData).to.have.property(\"id\");",
							"    });",
							"    pm.test(\"Response has 'numero_endosso' property\", function () {",
							"        pm.expect(jsonData).to.have.property(\"numero_endosso\");",
							"    });",
							"    pm.test(\"Response has 'status' property\", function () {",
							"        pm.expect(jsonData).to.have.property(\"status\");",
							"    });",
							"}"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gera um número aleatório de 6 dígitos\r",
							"function gerarNumeroApolice() {\r",
							"    return Math.floor(100000 + Math.random() * 900000).toString();\r",
							"}\r",
							"\r",
							"const numeroApolice = gerarNumeroApolice();\r",
							"pm.environment.set('num_endosso', numeroApolice);\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"endosso\": {\n        \"numero\": {{num_endosso}},\n        \"importancia_segurada\": -300.00\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{lh}}/apolices/{{numero_apolice}}/endossos",
					"host": [
						"{{lh}}"
					],
					"path": [
						"apolices",
						"{{numero_apolice}}",
						"endossos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Criar endosso sobre uma apólice [aumento_is_alteracao_vigencia]",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test: Status code is 2xx",
							"pm.test(\"Status code is 2xx\", function () {",
							"    pm.expect(pm.response.code).to.be.within(200, 299);",
							"});",
							"",
							"// Test: Response time is less than 2 seconds",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"// Test: Response has JSON Content-Type",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"// Test: Key properties in response body",
							"if (pm.response.headers.get(\"Content-Type\") && pm.response.headers.get(\"Content-Type\").includes(\"application/json\")) {",
							"    let jsonData = pm.response.json();",
							"    pm.test(\"Response has 'id' property\", function () {",
							"        pm.expect(jsonData).to.have.property(\"id\");",
							"    });",
							"    pm.test(\"Response has 'numero_endosso' property\", function () {",
							"        pm.expect(jsonData).to.have.property(\"numero_endosso\");",
							"    });",
							"    pm.test(\"Response has 'status' property\", function () {",
							"        pm.expect(jsonData).to.have.property(\"status\");",
							"    });",
							"}"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gera um número aleatório de 6 dígitos\r",
							"function gerarNumeroApolice() {\r",
							"    return Math.floor(100000 + Math.random() * 900000).toString();\r",
							"}\r",
							"\r",
							"const numeroApolice = gerarNumeroApolice();\r",
							"pm.environment.set('num_endosso', numeroApolice);\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"endosso\": {\n        \"numero\": {{num_endosso}},\n        \"importancia_segurada\": 500.00,\n        \"fim_vigencia\": \"2028-12-25\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{lh}}/apolices/{{numero_apolice}}/endossos",
					"host": [
						"{{lh}}"
					],
					"path": [
						"apolices",
						"{{numero_apolice}}",
						"endossos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Criar endosso sobre uma apólice [reducao_is_alteracao_vigencia]",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test: Status code is 2xx",
							"pm.test(\"Status code is 2xx\", function () {",
							"    pm.expect(pm.response.code).to.be.within(200, 299);",
							"});",
							"",
							"// Test: Response time is less than 2 seconds",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"// Test: Response has JSON Content-Type",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"// Test: Key properties in response body",
							"if (pm.response.headers.get(\"Content-Type\") && pm.response.headers.get(\"Content-Type\").includes(\"application/json\")) {",
							"    let jsonData = pm.response.json();",
							"    pm.test(\"Response has 'id' property\", function () {",
							"        pm.expect(jsonData).to.have.property(\"id\");",
							"    });",
							"    pm.test(\"Response has 'numero_endosso' property\", function () {",
							"        pm.expect(jsonData).to.have.property(\"numero_endosso\");",
							"    });",
							"    pm.test(\"Response has 'status' property\", function () {",
							"        pm.expect(jsonData).to.have.property(\"status\");",
							"    });",
							"}"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gera um número aleatório de 6 dígitos\r",
							"function gerarNumeroApolice() {\r",
							"    return Math.floor(100000 + Math.random() * 900000).toString();\r",
							"}\r",
							"\r",
							"const numeroApolice = gerarNumeroApolice();\r",
							"pm.environment.set('num_endosso', numeroApolice);\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"endosso\": {\n        \"numero\": {{num_endosso}},\n        \"importancia_segurada\": -500.00,\n        \"fim_vigencia\": \"2029-12-25\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{lh}}/apolices/{{numero_apolice}}/endossos",
					"host": [
						"{{lh}}"
					],
					"path": [
						"apolices",
						"{{numero_apolice}}",
						"endossos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Criar endosso  de cancelamento.",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test: Status code is 2xx",
							"pm.test(\"Status code is 2xx\", function () {",
							"    pm.expect(pm.response.code).to.be.within(200, 299);",
							"});",
							"",
							"// Test: Response time is less than 2 seconds",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"// Test: Response has JSON Content-Type",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"// Test: Key properties in response body",
							"if (pm.response.headers.get(\"Content-Type\") && pm.response.headers.get(\"Content-Type\").includes(\"application/json\")) {",
							"    let jsonData = pm.response.json();",
							"    pm.test(\"Response has 'id' property\", function () {",
							"        pm.expect(jsonData).to.have.property(\"id\");",
							"    });",
							"    pm.test(\"Response has 'numero_endosso' property\", function () {",
							"        pm.expect(jsonData).to.have.property(\"numero_endosso\");",
							"    });",
							"    pm.test(\"Response has 'status' property\", function () {",
							"        pm.expect(jsonData).to.have.property(\"status\");",
							"    });",
							"}"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Gera um número aleatório de 6 dígitos\r",
							"function gerarNumeroApolice() {\r",
							"    return Math.floor(100000 + Math.random() * 900000).toString();\r",
							"}\r",
							"\r",
							"const numeroApolice = gerarNumeroApolice();\r",
							"pm.environment.set('num_endosso', numeroApolice);\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"endosso\": {\n        \"numero\": {{num_endosso}},\n        \"tipo_endosso\": \"cancelamento\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{lh}}/apolices/{{numero_apolice}}/endossos",
					"host": [
						"{{lh}}"
					],
					"path": [
						"apolices",
						"{{numero_apolice}}",
						"endossos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Listar endossos de uma apólice",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test: Status code is 2xx",
							"pm.test(\"Status code is 2xx\", function () {",
							"    pm.expect(pm.response.code).to.be.within(200, 299);",
							"});",
							"",
							"// Test: Response time is less than 2 seconds",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"// Test: Response has JSON Content-Type",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"// Test: Response is an array of endorsements with key properties",
							"if (pm.response.headers.get(\"Content-Type\") && pm.response.headers.get(\"Content-Type\").includes(\"application/json\")) {",
							"    let jsonData = pm.response.json();",
							"    pm.test(\"Response is an array\", function () {",
							"        pm.expect(jsonData).to.be.an(\"array\");",
							"    });",
							"    if (Array.isArray(jsonData) && jsonData.length > 0) {",
							"        pm.test(\"Each endorsement has 'id', 'numero_endosso', and 'status'\", function () {",
							"            jsonData.forEach(function(item) {",
							"                pm.expect(item).to.have.property(\"id\");",
							"                pm.expect(item).to.have.property(\"numero_endosso\");",
							"                pm.expect(item).to.have.property(\"status\");",
							"            });",
							"        });",
							"    }",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{lh}}/apolices/{{numero_apolice}}/endossos",
					"host": [
						"{{lh}}"
					],
					"path": [
						"apolices",
						"{{numero_apolice}}",
						"endossos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Consultar endosso",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Test: Status code is 2xx",
							"pm.test(\"Status code is 2xx\", function () {",
							"    pm.expect(pm.response.code).to.be.within(200, 299);",
							"});",
							"",
							"// Test: Response time is less than 2 seconds",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"// Test: Response has JSON Content-Type",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"// Test: Key properties in response body",
							"if (pm.response.headers.get(\"Content-Type\") && pm.response.headers.get(\"Content-Type\").includes(\"application/json\")) {",
							"    let jsonData = pm.response.json();",
							"    pm.test(\"Response has 'id' property\", function () {",
							"        pm.expect(jsonData).to.have.property(\"id\");",
							"    });",
							"    pm.test(\"Response has 'numero_endosso' property\", function () {",
							"        pm.expect(jsonData).to.have.property(\"numero_endosso\");",
							"    });",
							"    pm.test(\"Response has 'status' property\", function () {",
							"        pm.expect(jsonData).to.have.property(\"status\");",
							"    });",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{lh}}/apolices/{{numero_apolice}}/endossos/{{numero_endosso}}",
					"host": [
						"{{lh}}"
					],
					"path": [
						"apolices",
						"{{numero_apolice}}",
						"endossos",
						"{{numero_endosso}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "lh",
			"value": ""
		}
	]
}